plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "Ladysnake Libs"
        url = "https://dl.bintray.com/ladysnake/libs"
    }
    maven {
    	name = "CottonMC"
    	url = "http://server.bbkr.space/artifactory/libs-release/"
    }
    maven {
    	name = "Modmuss50"
    	url = "https://maven.modmuss50.me/"
    }
}

minecraft {
	
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// Dependencies
	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cardinal_components_version}"
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cardinal_components_version}"
	modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:${cardinal_components_version}"
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:${cardinal_components_version}"
	
	modApi "teamreborn:energy:${teamreborn_energy_version}"
	include "teamreborn:energy:${teamreborn_energy_version}"
	modImplementation include("io.github.cottonmc:LibGui:3.3.5+1.16.5")
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
	
	repositories {
		
	}
}
